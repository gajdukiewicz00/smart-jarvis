name: CI

on:
  push:
    branches: [ main, refactor-vers ]
  pull_request:
    branches: [ main, refactor-vers ]

jobs:
  avro-schema-compatibility:
    name: Avro Schema Compatibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate Avro schemas (skip if none)
        if: ${{ hashFiles('contracts/**/*.avsc') != '' }}
        run: |
          python -m pip install -q --upgrade pip
          pip install -q fastavro
          python - <<'PY'
          import glob, sys
          from fastavro.schema import load_schema

          files = glob.glob('contracts/**/*.avsc', recursive=True)
          ok = True
          for f in files:
              try:
                  load_schema(f)
                  print("OK:", f)
              except Exception as e:
                  ok = False
                  print("FAIL:", f, "->", e)
          sys.exit(0 if ok else 1)
          PY

      - name: Skip Avro (no .avsc found)
        if: ${{ hashFiles('contracts/**/*.avsc') == '' }}
        run: echo "No .avsc files under contracts/ — skipping."

  lint-test:
    name: Lint and Test (Node services)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ voice-gateway, nlu-service, nlg-service, dm-service ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: npm ci --no-audit --no-fund

      - name: Build
        working-directory: services/${{ matrix.service }}
        run: npm run build --if-present

  python-lint:
    name: Python Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # In this repo Python код в одном сервисе:
        service: [ speech-service ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (soft)
        working-directory: services/${{ matrix.service }}
        shell: bash
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint (compileall)
        working-directory: services/${{ matrix.service }}
        shell: bash
        run: |
          python - <<'PY'
          import compileall, sys
          ok = compileall.compile_dir(".", quiet=1)
          sys.exit(0 if ok else 1)
          PY

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [ avro-schema-compatibility, lint-test, python-lint ]
    steps:
      - uses: actions/checkout@v4
      - name: Build voice-gateway
        run: docker build -t voice-gateway:test services/voice-gateway/
      - name: Build stt-service
        run: |
          if [ -d services/stt-service ]; then docker build -t stt-service:test services/stt-service/; else echo "skip stt-service"; fi
      - name: Build nlu-service
        run: docker build -t nlu-service:test services/nlu-service/
      - name: Build nlg-service
        run: docker build -t nlg-service:test services/nlg-service/
      - name: Build tts-service
        run: |
          if [ -d services/tts-service ]; then docker build -t tts-service:test services/tts-service/; else echo "skip tts-service"; fi
      - name: Build dm-service
        run: docker build -t dm-service:test services/dm-service/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [ docker-build ]
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "voice-gateway:test"
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL (no Java)
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript, python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Analyze
        uses: github/codeql-action/analyze@v2
