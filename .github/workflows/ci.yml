name: CI

on:
  push:
    branches: [main, refactor-vers]
  pull_request:
    branches: [main, refactor-vers]

jobs:
  avro:
    name: Avro schema check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - if: ${{ hashFiles('contracts/**/*.avsc') == '' }}
        run: echo "No Avro schemas -> skipping."
      - if: ${{ hashFiles('contracts/**/*.avsc') != '' }}
        run: |
          python -m pip install -q --upgrade pip
          pip install -q fastavro
          python - <<'PY'
          import glob, sys
          from fastavro.schema import load_schema
          ok=True
          for f in glob.glob("contracts/**/*.avsc", recursive=True):
              try: load_schema(f); print("OK:", f)
              except Exception as e: ok=False; print("FAIL:", f, "->", e)
          sys.exit(0 if ok else 1)
          PY

  node_nlp:
    name: Build nlp-engine
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: nlp-engine } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: nlp-engine/package-lock.json
      - run: npm ci
      - run: npm run build

  py_speech:
    name: Lint speech-service
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: speech-service } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: python -m pip install --upgrade pip
      - run: pip install -r requirements.txt
      - run: |
          if [ -f "pyproject.toml" ]; then pip install ruff && ruff check .; else echo "No linter configured; skipping."; fi

  java_build:
    name: Build Java modules
    runs-on: ubuntu-latest
    strategy:
      matrix: { module: [jarvis-desktop, task-service] }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven
      - name: Build ${{ matrix.module }}
        working-directory: ${{ matrix.module }}
        run: mvn -B -ntp -DskipTests package

  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    needs: [node_nlp, py_speech, java_build, avro]
    permissions: { actions: read, contents: read, security-events: write }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven
      - uses: github/codeql-action/init@v3
        with: { languages: javascript,typescript,python,java }
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3
